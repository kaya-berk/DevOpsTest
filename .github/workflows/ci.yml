name: C++ Excel Parser CI/CD

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-linux:
    name: Build on Linux
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        compiler: [gcc, clang]
        build_type: [Debug, Release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          libzip-dev \
          libxml2-dev \
          libxslt-dev \
          zlib1g-dev \
          pkg-config \
          libpugixml-dev \
          libtinyxml2-dev
    
    - name: Setup GCC
      if: matrix.compiler == 'gcc'
      run: |
        sudo apt-get install -y gcc-11 g++-11
        echo "CC=gcc-11" >> $GITHUB_ENV
        echo "CXX=g++-11" >> $GITHUB_ENV
    
    - name: Setup Clang
      if: matrix.compiler == 'clang'
      run: |
        sudo apt-get install -y clang-14
        echo "CC=clang-14" >> $GITHUB_ENV
        echo "CXX=clang++-14" >> $GITHUB_ENV
    
    - name: Create build directory
      run: mkdir -p build
    
    - name: Configure CMake
      run: |
        cd build
        cmake .. \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_C_COMPILER=${{ env.CC }} \
          -DCMAKE_CXX_COMPILER=${{ env.CXX }}
    
    - name: Build project
      run: |
        cd build
        make -j$(nproc)
    
    - name: Run tests
      if: matrix.build_type == 'Debug'
      run: |
        cd build
        if [ -f ./test_excel_parser ]; then
          ./test_excel_parser
        fi
        if [ -d tests ]; then
          ctest --output-on-failure
        fi
    
    - name: Upload build artifacts
      if: matrix.build_type == 'Release' && matrix.compiler == 'gcc'
      uses: actions/upload-artifact@v3
      with:
        name: excel-parser-linux
        path: |
          build/excel_parser
          build/*.so
          build/*.a

  build-windows:
    name: Build on Windows
    runs-on: windows-latest
    
    strategy:
      matrix:
        build_type: [Debug, Release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.3
    
    - name: Setup vcpkg
      run: |
        git clone https://github.com/microsoft/vcpkg.git
        .\vcpkg\bootstrap-vcpkg.bat
        echo "VCPKG_ROOT=${{ github.workspace }}\vcpkg" >> $env:GITHUB_ENV
    
    - name: Install dependencies with vcpkg
      run: |
        .\vcpkg\vcpkg install libzip:x64-windows
        .\vcpkg\vcpkg install pugixml:x64-windows
        .\vcpkg\vcpkg install tinyxml2:x64-windows
    
    - name: Create build directory
      run: mkdir build
    
    - name: Configure CMake
      run: |
        cd build
        cmake .. `
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} `
          -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}\scripts\buildsystems\vcpkg.cmake `
          -G "Visual Studio 17 2022" `
          -A x64
    
    - name: Build project
      run: |
        cd build
        cmake --build . --config ${{ matrix.build_type }} --parallel
    
    - name: Run tests
      if: matrix.build_type == 'Debug'
      run: |
        cd build
        if (Test-Path ".\Debug\test_excel_parser.exe") {
          .\Debug\test_excel_parser.exe
        }
        if (Test-Path ".\tests") {
          ctest --output-on-failure -C ${{ matrix.build_type }}
        }
    
    - name: Upload build artifacts
      if: matrix.build_type == 'Release'
      uses: actions/upload-artifact@v3
      with:
        name: excel-parser-windows
        path: |
          build/Release/*.exe
          build/Release/*.dll
          build/Release/*.lib

  build-macos:
    name: Build on macOS
    runs-on: macos-latest
    
    strategy:
      matrix:
        build_type: [Debug, Release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        brew update
        brew install cmake libzip pugixml tinyxml2 pkg-config
    
    - name: Create build directory
      run: mkdir -p build
    
    - name: Configure CMake
      run: |
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
    
    - name: Build project
      run: |
        cd build
        make -j$(sysctl -n hw.ncpu)
    
    - name: Run tests
      if: matrix.build_type == 'Debug'
      run: |
        cd build
        if [ -f ./test_excel_parser ]; then
          ./test_excel_parser
        fi
        if [ -d tests ]; then
          ctest --output-on-failure
        fi
    
    - name: Upload build artifacts
      if: matrix.build_type == 'Release'
      uses: actions/upload-artifact@v3
      with:
        name: excel-parser-macos
        path: |
          build/excel_parser
          build/*.dylib
          build/*.a

  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cppcheck \
          clang-tools \
          clang-tidy
    
    - name: Run cppcheck
      run: |
        cppcheck --enable=all --std=c++17 --inline-suppr \
          --suppress=missingIncludeSystem \
          --error-exitcode=1 \
          src/ include/
      continue-on-error: true
    
    - name: Run clang-tidy
      run: |
        if [ -f .clang-tidy ]; then
          find src/ -name "*.cpp" -exec clang-tidy {} \;
        fi
      continue-on-error: true

  memory-check:
    name: Memory Check (Valgrind)
    runs-on: ubuntu-latest
    needs: build-linux
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          valgrind \
          libzip-dev \
          libxml2-dev \
          libpugixml-dev
    
    - name: Build with debug info
      run: |
        mkdir -p build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-g -O0"
        make -j$(nproc)
    
    - name: Run Valgrind
      run: |
        cd build
        if [ -f ./excel_parser ]; then
          valgrind --leak-check=full --show-leak-kinds=all \
            --track-origins=yes --error-exitcode=1 \
            ./excel_parser sample.xlsx || true
        fi

  documentation:
    name: Generate Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Doxygen
      run: |
        sudo apt-get update
        sudo apt-get install -y doxygen graphviz
    
    - name: Generate documentation
      run: |
        if [ -f Doxyfile ]; then
          doxygen Doxyfile
        else
          echo "No Doxyfile found, skipping documentation generation"
        fi
    
    - name: Upload documentation
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: actions/upload-pages-artifact@v2
      with:
        path: docs/html/

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, build-macos]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Create release archives
      run: |
        tar -czf excel-parser-linux.tar.gz excel-parser-linux/
        zip -r excel-parser-windows.zip excel-parser-windows/
        tar -czf excel-parser-macos.tar.gz excel-parser-macos/
    
    - name: Create Release
      if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          excel-parser-linux.tar.gz
          excel-parser-windows.zip
          excel-parser-macos.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
